// Time Complexity : O(n), where n -> number of houses
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : None

// starting with the first house keep track of the cost for each color
// calculate the minimum cost by comparing with the minimum of the other 2 colors of the previous house
// return the minimum of the 3

class Solution {
    public int minCost(int[][] costs) {
        int n = costs.length;
        int[] dp = new int[3];
        for(int i = 0; i < 3; i++)
            dp[i] = costs[0][i];
        for(int i = 1; i < n; i++) {
            int tempR = dp[0]; 
            dp[0] = costs[i][0] + Math.min(dp[1], dp[2]);
            int tempB = dp[1];
            dp[1] = costs[i][1] + Math.min(tempR, dp[2]);
            dp[2] = costs[i][2] + Math.min(tempR, tempB);
        }
        return Math.min(dp[0], Math.min(dp[1], dp[2]));
    }
}